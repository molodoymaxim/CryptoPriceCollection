// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/currency/add": {
            "post": {
                "description": "Добавляет криптовалюту в список отслеживаемых (watched_currencies).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Добавить валюту",
                "parameters": [
                    {
                        "description": "Запрос на добавление валюты",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddCurrencyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Failed to add currency: \u003cdetails\u003e",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/currency/price": {
            "post": {
                "description": "Возвращает последнюю цену валюты (без timestamp) или ближайшую цену к указанному времени (с timestamp).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Получить цену валюты",
                "parameters": [
                    {
                        "description": "Запрос на получение цены",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PriceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное получение цены",
                        "schema": {
                            "$ref": "#/definitions/types.CurrencyPrice"
                        }
                    },
                    "400": {
                        "description": "error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error: Price not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Failed to fetch price: \u003cdetails\u003e",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/currency/remove": {
            "post": {
                "description": "Удаляет криптовалюту из списка отслеживаемых (watched_currencies), сохраняя исторические цены в currency_prices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Удалить валюту",
                "parameters": [
                    {
                        "description": "Запрос на удаление валюты",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddCurrencyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Failed to remove currency: \u003cdetails\u003e",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.AddCurrencyRequest": {
            "type": "object",
            "required": [
                "coin"
            ],
            "properties": {
                "coin": {
                    "type": "string"
                }
            }
        },
        "types.CurrencyPrice": {
            "type": "object",
            "properties": {
                "coin": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.PriceRequest": {
            "type": "object",
            "required": [
                "coin"
            ],
            "properties": {
                "coin": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
